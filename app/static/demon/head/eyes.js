// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–ª–∞–∑–∞–º–∏ –¥–µ–º–æ–Ω–∞
export class EyeTrackingManager {
    constructor(config = {}) {
        // –ì–ª—É–±–æ–∫–æ–µ —Å–ª–∏—è–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π —Å –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        this.config = this.deepMerge({
            maxEyeMovement: Math.PI / 6,  // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –≥–ª–∞–∑
            smoothingFactor: 0.2,         // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è
            blinkFrequency: 5000,         // –ß–∞—Å—Ç–æ—Ç–∞ –º–æ—Ä–≥–∞–Ω–∏—è (–º—Å)
            facialAnimationIntensity: 0.2, // –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏ –ª–∏—Ü–∞
            debugMode: false,              // –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏
            verboseLogging: false,         // –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            boneCriteria: {
                nose: {
                    keywords: [
                        'nose', 'nariz', 'naris', 
                        'punta_nariz', 'nose_tip', 
                        'centro_nariz', 'nose_center',
                        'puente_nariz', 'nose_bridge',
                        'nariz_punta', 'nariz_centro',
                        'bone001', 'nose_bone'
                    ],
                    positionCriteria: {
                        heightRange: {
                            min: 6.5,     // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞
                            max: 8.0      // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞
                        },
                        zOffset: {
                            min: 1.5,     // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ –ø–æ Z
                            max: 3.0      // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ –ø–æ Z
                        },
                        xOffset: {
                            max: 0.5      // –î–æ–ø—É—Å—Ç–∏–º–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø–æ X
                        },
                        confidenceThreshold: 0.7  // –ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏
                    },
                    excludeNames: []  // –°–ø–∏—Å–æ–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
                },
                forehead: {
                    keywords: [
                        'forehead', 'frente', 'brow', 
                        'brow_bone', 'hueso_frente', 
                        'parte_superior_cabeza', 'top_head',
                        'frontal', 'frontal_bone',
                        'cabeza_superior', 'head_top',
                        'head', 'cabeza', 'bone'
                    ],
                    positionCriteria: {
                        heightRange: {
                            min: 5.5,     // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –ª–±–∞
                            max: 7.0      // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –ª–±–∞
                        },
                        zOffset: {
                            min: 1.0,     // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ –ø–æ Z
                            max: 2.5      // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ –ø–æ Z
                        },
                        confidenceThreshold: 0.6  // –ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏
                    },
                    excludeNames: ['bone001']  // –ò—Å–∫–ª—é—á–∞–µ–º –∏–º–µ–Ω–∞, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–æ—Å–æ–≤—ã–º–∏
                }
            }
        }, config);
        
        // –ù–æ–≤—ã–π –º–µ—Ö–∞–Ω–∏–∑–º –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–æ–≤
        this.logCache = {
            facialBonesSignature: null,
            lastLogTimestamp: 0,
            logInterval: 5000 // 5 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –ª–æ–≥–∞–º–∏
        };
        
        this.debugCounter = {
            nose: 0,
            forehead: 0,
            globalLogCounter: 0
        };
        this.detectedBones = {
            nose: [],
            forehead: []
        };
        this.hasLogged = false;
    }

    // –ì–ª—É–±–æ–∫–æ–µ —Å–ª–∏—è–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤
    deepMerge(target, source) {
        const output = Object.assign({}, target);
        if (this.isObject(target) && this.isObject(source)) {
            Object.keys(source).forEach(key => {
                if (this.isObject(source[key])) {
                    if (!(key in target))
                        Object.assign(output, { [key]: source[key] });
                    else
                        output[key] = this.deepMerge(target[key], source[key]);
                } else {
                    Object.assign(output, { [key]: source[key] });
                }
            });
        }
        return output;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–±—ä–µ–∫—Ç –æ–±—ä–µ–∫—Ç–æ–º
    isObject(item) {
        return (item && typeof item === 'object' && !Array.isArray(item));
    }

    findEyeBones(model) {
        const eyeBones = {
            left: null,
            right: null
        };

        const eyeKeywords = ['eye', 'ojo', 'pupil', 'iris'];
        
        model.traverse(bone => {
            if (bone.type === 'Bone') {
                const name = bone.name.toLowerCase();
                
                for (let keyword of eyeKeywords) {
                    if (name.includes(keyword)) {
                        if (name.includes('l')) {
                            eyeBones.left = bone;
                        } else if (name.includes('r')) {
                            eyeBones.right = bone;
                        }
                    }
                }
            }
        });

        return eyeBones;
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Å–∏–≥–Ω–∞—Ç—É—Ä—ã –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –∫–æ—Å—Ç–µ–π
    generateBonesSignature(facialBones) {
        const signature = Object.entries(facialBones)
            .map(([type, bones]) => 
                `${type}:${bones.map(bone => bone.name).sort().join(',')}`
            )
            .join('|');
        return signature;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å
    shouldLog(facialBones) {
        const currentTime = Date.now();
        const currentSignature = this.generateBonesSignature(facialBones);
        
        const timeSinceLastLog = currentTime - this.logCache.lastLogTimestamp;
        const signatureChanged = currentSignature !== this.logCache.facialBonesSignature;

        const shouldLog = this.config.debugMode && (
            signatureChanged || 
            timeSinceLastLog > this.logCache.logInterval
        );

        if (shouldLog) {
            this.logCache.facialBonesSignature = currentSignature;
            this.logCache.lastLogTimestamp = currentTime;
        }

        return shouldLog;
    }

    calculateBoneConfidence(bone, boneType) {
        const criteria = this.config.boneCriteria[boneType];
        const name = bone.name.toLowerCase();
        const position = bone.position || { x: 0, y: 0, z: 0 };

        let confidence = 0;
        let confidenceBreakdown = {
            keywordMatch: false,
            heightMatch: false,
            zOffsetMatch: false,
            xOffsetMatch: false
        };

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        confidenceBreakdown.keywordMatch = criteria.keywords.some(keyword => 
            name.includes(keyword)
        );
        confidence += confidenceBreakdown.keywordMatch ? 0.4 : 0;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∑–∏—Ü–∏–∏
        confidenceBreakdown.heightMatch = 
            position.y >= criteria.positionCriteria.heightRange.min && 
            position.y <= criteria.positionCriteria.heightRange.max;
        confidence += confidenceBreakdown.heightMatch ? 0.3 : 0;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–º–µ—â–µ–Ω–∏—è –ø–æ Z
        confidenceBreakdown.zOffsetMatch = 
            Math.abs(position.z) >= criteria.positionCriteria.zOffset.min &&
            Math.abs(position.z) <= criteria.positionCriteria.zOffset.max;
        confidence += confidenceBreakdown.zOffsetMatch ? 0.2 : 0;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–º–µ—â–µ–Ω–∏—è –ø–æ X (—Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ—Å–∞)
        if (boneType === 'nose') {
            confidenceBreakdown.xOffsetMatch = 
                Math.abs(position.x) <= criteria.positionCriteria.xOffset.max;
            confidence += confidenceBreakdown.xOffsetMatch ? 0.1 : 0;
        }

        // –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º
        if (this.config.verboseLogging) {
            console.log(`üîç Bone Confidence Breakdown for ${bone.name} (${boneType}):`, {
                confidence: confidence.toFixed(2),
                ...confidenceBreakdown
            });
        }

        return { 
            score: confidence, 
            breakdown: confidenceBreakdown 
        };
    }

    isNoseBone(bone) {
        const noseCriteria = this.config.boneCriteria.nose;
        
        // –ò—Å–∫–ª—é—á–∞–µ–º –∫–æ—Å—Ç–∏, —É–∫–∞–∑–∞–Ω–Ω—ã–µ –≤ —Å–ø–∏—Å–∫–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
        if (noseCriteria.excludeNames && 
            noseCriteria.excludeNames.includes(bone.name.toLowerCase())) {
            return false;
        }

        const { score, breakdown } = this.calculateBoneConfidence(bone, 'nose');
        
        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º
        if (this.config.debugMode && this.config.verboseLogging) {
            console.log(`ü¶¥ Nose Bone Analysis: ${bone.name}`, {
                confidence: score.toFixed(2),
                matchDetails: breakdown,
                position: bone.position
            });
        }

        return score >= noseCriteria.positionCriteria.confidenceThreshold;
    }

    isForeheadBone(bone) {
        const foreheadCriteria = this.config.boneCriteria.forehead;
        
        // –ò—Å–∫–ª—é—á–∞–µ–º –∫–æ—Å—Ç–∏, —É–∫–∞–∑–∞–Ω–Ω—ã–µ –≤ —Å–ø–∏—Å–∫–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
        if (foreheadCriteria.excludeNames && 
            foreheadCriteria.excludeNames.includes(bone.name.toLowerCase())) {
            return false;
        }

        const { score, breakdown } = this.calculateBoneConfidence(bone, 'forehead');
        
        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º
        if (this.config.debugMode && this.config.verboseLogging) {
            console.log(`ü¶¥ Forehead Bone Analysis: ${bone.name}`, {
                confidence: score.toFixed(2),
                matchDetails: breakdown,
                position: bone.position
            });
        }

        return score >= foreheadCriteria.positionCriteria.confidenceThreshold;
    }

    findFacialBones(model) {
        this.debugCounter.globalLogCounter++;

        const facialBones = {
            nose: [],
            mouth: [],
            cheeks: [],
            forehead: [],
            jaw: []
        };

        const processedBones = new Set(); // –î–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è

        const searchBones = (obj, depth = 0) => {
            if (depth > 10) return;

            if ((obj.type === 'Bone' || obj.type === 'SkinnedMesh') && obj.name) {
                const name = obj.name.toLowerCase();

                // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–æ—Å–∞
                if (this.isNoseBone(obj) && !processedBones.has(name)) {
                    const { score } = this.calculateBoneConfidence(obj, 'nose');
                    facialBones.nose.push({
                        ...obj,
                        matchReason: 'nose bone detection',
                        matchDetails: {
                            name: obj.name,
                            position: obj.position,
                            confidence: score.toFixed(2),
                            criteria: 'advanced nose detection'
                        }
                    });
                    processedBones.add(name);
                }

                // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ª–±–∞
                if (this.isForeheadBone(obj) && !processedBones.has(name)) {
                    const { score } = this.calculateBoneConfidence(obj, 'forehead');
                    facialBones.forehead.push({
                        ...obj,
                        matchReason: 'forehead bone detection',
                        matchDetails: {
                            name: obj.name,
                            position: obj.position,
                            confidence: score.toFixed(2),
                            criteria: 'advanced forehead detection'
                        }
                    });
                    processedBones.add(name);
                }
            }

            if (obj.children) {
                obj.children.forEach(child => searchBones(child, depth + 1));
            }
        };

        searchBones(model);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –∫–æ—Å—Ç–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        this.detectedBones.nose = facialBones.nose;
        this.detectedBones.forehead = facialBones.forehead;

        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –Ω–æ–≤—ã–º –º–µ—Ö–∞–Ω–∏–∑–º–æ–º
        if (this.shouldLog(facialBones)) {
            this.logDetectedBones(facialBones);
        }

        return facialBones;
    }

    // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logDetectedBones(facialBones) {
        console.log('üîé Detected Facial Bones');
        
        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ—Å–æ–≤—ã—Ö –∫–æ—Å—Ç–µ–π
        console.log('üìç NOSE Bones:');
        facialBones.nose.forEach((bone, index) => {
            console.log(`#${index + 1}: ${bone.name} (nose bone detection)`);
            console.log(`Details: ‚Äì ${JSON.stringify({
                name: bone.name,
                position: bone.position,
                confidence: bone.matchDetails.confidence,
                criteria: bone.matchDetails.criteria
            })}`);
        });

        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–±–æ–≤—ã—Ö –∫–æ—Å—Ç–µ–π
        console.log('üìç FOREHEAD Bones:');
        facialBones.forehead.forEach((bone, index) => {
            console.log(`#${index + 1}: ${bone.name} (forehead bone detection)`);
            console.log(`Details: ‚Äì ${JSON.stringify({
                name: bone.name,
                position: bone.position,
                confidence: bone.matchDetails.confidence,
                criteria: bone.matchDetails.criteria
            })}`);
        });

        // –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        console.log('üìä Bone Detection Summary:');
        Object.keys(facialBones).forEach(boneType => {
            console.log(`- Total ${boneType.charAt(0).toUpperCase() + boneType.slice(1)} Bones: ${facialBones[boneType].length}`);
        });
    }

    trackEyes(eyeBones, targetPosition = { x: 0, y: 0, z: 0 }) {
        if (!eyeBones.left && !eyeBones.right) return;

        const bones = [eyeBones.left, eyeBones.right].filter(Boolean);

        bones.forEach(bone => {
            bone.rotation.x = this._smoothRotation(
                bone.rotation.x, 
                Math.max(-this.config.maxEyeMovement, Math.min(this.config.maxEyeMovement, targetPosition.x)),
                this.config.smoothingFactor
            );

            bone.rotation.y = this._smoothRotation(
                bone.rotation.y,
                Math.max(-this.config.maxEyeMovement, Math.min(this.config.maxEyeMovement, targetPosition.y)),
                this.config.smoothingFactor
            );
        });
    }

    _smoothRotation(current, target, factor) {
        return current * (1 - factor) + target * factor;
    }

    startBlinkAnimation(eyeBones) {
        const blinkInterval = setInterval(() => {
            if (eyeBones.left && eyeBones.right) {
                eyeBones.left.scale.y = 0.1;
                eyeBones.right.scale.y = 0.1;

                setTimeout(() => {
                    eyeBones.left.scale.y = 1;
                    eyeBones.right.scale.y = 1;
                }, 100);
            }
        }, this.config.blinkFrequency);

        return () => clearInterval(blinkInterval);
    }

    animateFacialBones(facialBones, mousePosition = { x: 0, y: 0 }) {
        const intensity = this.config.facialAnimationIntensity;

        if (facialBones.nose.length > 0) {
            facialBones.nose.forEach(bone => {
                bone.rotation.x = mousePosition.y * intensity;
                bone.rotation.y = mousePosition.x * intensity;
                
                this.debugFacialBone(bone, 'Nose');
            });
        }

        if (facialBones.forehead.length > 0) {
            facialBones.forehead.forEach(bone => {
                bone.rotation.x = mousePosition.y * intensity * 0.5;
                bone.rotation.y = mousePosition.x * intensity * 0.5;
                
                this.debugFacialBone(bone, 'Forehead');
            });
        }

        Object.entries(facialBones).forEach(([type, bones]) => {
            if (type !== 'nose' && type !== 'forehead') {
                bones.forEach(bone => {
                    bone.rotation.x += (Math.random() - 0.5) * intensity;
                    bone.rotation.y += (Math.random() - 0.5) * intensity;
                    bone.rotation.z += (Math.random() - 0.5) * intensity;
                });
            }
        });
    }

    debugFacialBone(bone, boneType) {
        if (!this.config.debugMode) return;

        this.debugCounter[boneType.toLowerCase()]++;
        if (this.debugCounter[boneType.toLowerCase()] % 10 !== 0) return;

        const styles = {
            title: 'background: #222; color: #bada55; padding: 2px; border-radius: 4px;',
            rotation: 'color: blue;',
            position: 'color: green;',
            scale: 'color: purple;'
        };

        console.log(`%cüîç ${boneType} Bone Diagnostic`, styles.title);

        console.log('%cBone Name:', 'font-weight: bold;', bone.name);
        
        // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Ä–∞—â–µ–Ω–∏—è —Å —á–∏—Å–ª–æ–≤—ã–º –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ–º
        const rotation = bone.rotation || { x: 0, y: 0, z: 0 };
        console.log('%cRotation:', styles.rotation, {
            x: Number(rotation.x || 0).toFixed(4),
            y: Number(rotation.y || 0).toFixed(4),
            z: Number(rotation.z || 0).toFixed(4)
        });
        
        // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —Å —á–∏—Å–ª–æ–≤—ã–º –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ–º
        const position = bone.position || { x: 0, y: 0, z: 0 };
        console.log('%cPosition:', styles.position, {
            x: Number(position.x || 0).toFixed(4),
            y: Number(position.y || 0).toFixed(4),
            z: Number(position.z || 0).toFixed(4)
        });
        
        // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–∞—Å—à—Ç–∞–±–∞ —Å —á–∏—Å–ª–æ–≤—ã–º –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ–º
        const scale = bone.scale || { x: 1, y: 1, z: 1 };
        console.log('%cScale:', styles.scale, {
            x: Number(scale.x || 1).toFixed(4),
            y: Number(scale.y || 1).toFixed(4),
            z: Number(scale.z || 1).toFixed(4)
        });
        
        console.log('----------------------------');
    }

    enableDebugMode() {
        this.config.debugMode = true;
    }

    disableDebugMode() {
        this.config.debugMode = false;
    }
}
